/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Constantin Iosef (https://sketchfab.com/constantin.iosef)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/envart-scifi-floor-tile-3-3a22a02446104089b6c059455b67792a
Title: [EnvArt] Scifi Floor Tile 3
*/

import * as THREE from "three";
import React, { useRef, useEffect, useState } from "react";
import { ToonMaterial } from "../material/ToonMaterial";
import VisibleEdges from "../material/Edges";
import { useGLTF } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";

export function FloorTile({ nodes, materials, position }) {
  const [isFloorReady, setIsFloorReady] = useState(false);
  const floor = useRef();
  const [worldPosition, setWorldPosition] = useState(new THREE.Vector3());

  useEffect(() => {
    if (floor.current) {
      const tempWorldPosition = new THREE.Vector3();
      floor.current.getWorldPosition(tempWorldPosition);
      setWorldPosition(tempWorldPosition);
      setIsFloorReady(true);
    }
  }, [floor.current]);

  return (
    <group dispose={null} position={position} rotation={[-Math.PI / 2, 0, 0]}>
      <group scale={0.006}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["EViRO_Kuby_��������_0"].geometry}
          material={materials.material}
          position={[0, 0, -8.893]}
          ref={floor}
        >
          <ToonMaterial color={"#c4cef2"} />
          {isFloorReady && (
            <VisibleEdges
              color="black"
              threshold={40}
              baseLineWidth={5}
              otherParent={true}
              parentPosition={worldPosition}
            />
          )}
        </mesh>
      </group>
    </group>
  );
}

export function Floor({
  rows = 2,
  columns = 2,
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  shoot = false,
}) {
  const { nodes, materials } = useGLTF("/../assets/floortile.glb");
  const tiles = [];
  const tileSize = 1.5;
  const tileSpacing = 1.5;

  const generateFloorTiles = () => {
    for (let i = 0; i < rows; i++) {
      for (let j = 0; j < columns; j++) {
        const tilePosition = [
          j * (tileSize + tileSpacing),
          0,
          i * (tileSize + tileSpacing),
        ];

        tiles.push(
          <FloorTile
            key={`tile-${i}-${j}`}
            nodes={nodes}
            materials={materials}
            position={tilePosition}
          />
        );
      }
    }
    return tiles;
  };

  return (
    <group position={position} rotation={rotation}>
      <RigidBody type="fixed" colliders="cuboid">
        {generateFloorTiles()}
      </RigidBody>
      {shoot && (
        <mesh
          name="groundShoot"
          position={[
            tileSize * columns - tileSize,
            0.054,
            tileSize * rows - tileSize,
          ]}
          rotation={[-Math.PI / 2, 0, 0]}
          visible={false}
        >
          <planeGeometry args={[3 * columns, 3 * rows]} />
        </mesh>
      )}
    </group>
  );
}

useGLTF.preload("/../assets/floortile.glb");
