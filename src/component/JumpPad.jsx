/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: KainHunter1997 (https://sketchfab.com/KainHunterDesign)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/sm-jumppad-7a41b91af23b4a7db4579677666c7f14
Title: SM_JumpPad
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, Edges } from "@react-three/drei";
import * as THREE from "three";
import { RigidBody, MeshCollider, CuboidCollider } from "@react-three/rapier";
import { ToonMaterial } from "../material/ToonMaterial";
import VisibleEdges from "../material/Edges";

export function JumpPad({ position = [0, 0.07, 0] }) {
  const { nodes, materials } = useGLTF("../assets/sm_jumppad.glb");
  const group = useRef();
  const [isGroupReady, setIsGroupReady] = useState(false);

  useEffect(() => {
    if (group.current) {
      setIsGroupReady(true);
    }
  }, [group.current]);

  const jump = (payload) => {
    const isPlayer = payload.other.rigidBodyObject?.name === "Player";
    const isCube = payload.other.rigidBodyObject?.name === "Box";
    if (!(isPlayer || isCube)) return;

    const playerRigidBody = payload.other.rigidBody;

    const currentVelocity = playerRigidBody.linvel();

    const newVelocity = { x: currentVelocity.x, y: 15, z: currentVelocity.z };

    playerRigidBody.setLinvel(newVelocity, true);
  };

  return (
    <>
      <RigidBody colliders={false} type="fixed" position={position}>
        <group dispose={null} ref={group}>
          <group scale={0.025}>
            <MeshCollider type="hull">
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.JumpPad_M_JumpPad_0.geometry}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={50}
              >
                <ToonMaterial color={"#FFABAB"} />
                {isGroupReady && (
                  <VisibleEdges
                    color="black"
                    threshold={25}
                    baseLineWidth={6}
                    otherParent={true}
                    parentPosition={group.current.position}
                  />
                )}
              </mesh>
            </MeshCollider>

            <mesh
              geometry={nodes.JumpPadBeam_M_JumpPadBeam_0.geometry}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={50}
            >
              <ToonMaterial transparent={true} opacity={0.5} color="#FFE3A9" />
              {isGroupReady && (
                <VisibleEdges
                  color="#FFE3A9"
                  threshold={15}
                  baseLineWidth={3}
                  otherParent={true}
                  parentPosition={group.current.position}
                />
              )}
            </mesh>
          </group>
        </group>
      </RigidBody>

      <RigidBody type="fixed" onCollisionEnter={(payload) => jump(payload)}>
        <CuboidCollider
          args={[0.65, 0.001, 0.65]}
          position={[
            ...position.slice(0, 1),
            position[1] + 0.52,
            ...position.slice(2),
          ]}
        />
      </RigidBody>
    </>
  );
}

useGLTF.preload("../assets/sm_jumppad.glb");
